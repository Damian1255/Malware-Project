import subprocess


def start_extractor(clear_log=False, timeout_seconds=500):

    """

    This function is used to start the subprocess that runs the binlex_extractor.py script.
    The reason why this is needed is because the binlex might crash while extracting from a file
    and not throw an exception, thus, this subprocessor script is used to automatically start the
    binlex_extractor.py script again.

    In addition, the subprocessor script also has a timeout_seconds parameter that is used to kill
    the subprocess if it takes too long to finish. This is useful when the binlex_extractor.py script
    gets stuck for too long while extracting from a file.

    IMPORTANT:
    Ensure that the binlex_extractor.py script is in the same directory as this script,
    and log file is in the binlex/extractor/logs/ directory.

    Note:
    The input and output directories can be changed in the binlex_extractor.py script.

    - param `clear_log:` If True, the failed_logs.txt file will be cleared before starting the subprocess.
    - param `timeout_seconds`: The number of seconds to wait before killing the subprocess if it takes too long to finish.


    """

    # Clear the logs if clear_log is True, this is useful when you want to start fresh.
    if clear_log:
        with open('binlex/extractor/logs/failed_logs.txt', 'w') as f:
            f.write('')

    while True:
        try:

            # Start the subprocess
            process = subprocess.Popen(["python", "binlex/extractor/traits_extractor.py"])

            # Wait for the subprocess to finish or timeout
            process.wait(timeout=timeout_seconds)

        except subprocess.TimeoutExpired:

            # Kill the subprocess if it takes too long to finish and start a new one
            print("Extractor took too long to finish. Skipping to the next one. YEET!")
            process.kill()
            

if __name__ == "__main__":
    # Start the extractor
    start_extractor(clear_log=True, timeout_seconds=500)
