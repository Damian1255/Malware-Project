import pefile
import pandas as pd

def extract_features(path):
    try:
        sample = pefile.PE(path)
    except Exception as e:
        return None

    # Extract and features to the dictionary
    features_dict = {}
    features_dict['Name'] = path.split('\\')[-1]
    attributes = [
        'OPTIONAL_HEADER.CheckSum', 'FILE_HEADER.Machine', 'FILE_HEADER.SizeOfOptionalHeader',
        'FILE_HEADER.Characteristics', 'OPTIONAL_HEADER.MajorLinkerVersion', 'OPTIONAL_HEADER.MinorLinkerVersion',
        'OPTIONAL_HEADER.SizeOfCode', 'OPTIONAL_HEADER.SizeOfInitializedData', 'OPTIONAL_HEADER.SizeOfUninitializedData',
        'OPTIONAL_HEADER.AddressOfEntryPoint', 'OPTIONAL_HEADER.BaseOfCode', 'OPTIONAL_HEADER.BaseOfData',
        'OPTIONAL_HEADER.ImageBase', 'OPTIONAL_HEADER.SectionAlignment', 'OPTIONAL_HEADER.FileAlignment',
        'OPTIONAL_HEADER.MajorOperatingSystemVersion', 'OPTIONAL_HEADER.MinorOperatingSystemVersion',
        'OPTIONAL_HEADER.MajorImageVersion', 'OPTIONAL_HEADER.MinorImageVersion', 'OPTIONAL_HEADER.MajorSubsystemVersion',
        'OPTIONAL_HEADER.MinorSubsystemVersion', 'OPTIONAL_HEADER.SizeOfImage', 'OPTIONAL_HEADER.SizeOfHeaders',
        'OPTIONAL_HEADER.CheckSum', 'OPTIONAL_HEADER.Subsystem', 'OPTIONAL_HEADER.DllCharacteristics',
        'OPTIONAL_HEADER.SizeOfStackReserve', 'OPTIONAL_HEADER.SizeOfStackCommit', 'OPTIONAL_HEADER.SizeOfHeapReserve',
        'OPTIONAL_HEADER.SizeOfHeapCommit', 'OPTIONAL_HEADER.LoaderFlags', 'OPTIONAL_HEADER.NumberOfRvaAndSizes',
        'FILE_HEADER.NumberOfSections'
    ]

    for attr in attributes:
        parts = attr.split('.')
        obj = sample
        for part in parts:
            if hasattr(obj, part):
                obj = getattr(obj, part)
            else:
                obj = None
                break
        if obj is not None:
            features_dict[attr] = obj
        else:
            features_dict[attr] = 0

    MeanEntropy, MaxEntropy, MinEntropy = [], [], []
    MeanRawsize, MaxRawsize, MinRawsize = [], [], []
    MeanVirtualsize, MaxVirtualsize, MinVirtualsize = [], [], []

    for section in sample.sections:
        MeanEntropy.append(section.get_entropy())
        MeanRawsize.append(section.SizeOfRawData)
        MeanVirtualsize.append(section.Misc_VirtualSize)
        MaxEntropy.append(section.get_entropy())
        MaxRawsize.append(section.SizeOfRawData)
        MaxVirtualsize.append(section.Misc_VirtualSize)
        MinEntropy.append(section.get_entropy())
        MinRawsize.append(section.SizeOfRawData)
        MinVirtualsize.append(section.Misc_VirtualSize)

    features_dict['MeanEntropy'] = sum(MeanEntropy) / float(len(MeanEntropy))
    features_dict['MeanRawsize'] = sum(MeanRawsize) / float(len(MeanRawsize))
    features_dict['MeanVirtualsize'] = sum(MeanVirtualsize) / float(len(MeanVirtualsize))
    features_dict['MaxEntropy'] = max(MaxEntropy)
    features_dict['MaxRawsize'] = max(MaxRawsize)
    features_dict['MaxVirtualsize'] = max(MaxVirtualsize)
    features_dict['MinEntropy'] = min(MinEntropy)
    features_dict['MinRawsize'] = min(MinRawsize)
    features_dict['MinVirtualsize'] = min(MinVirtualsize)

    # attributes = [
    #     'OPTIONAL_HEADER.CheckSum', 'FILE_HEADER.Machine', 'FILE_HEADER.SizeOfOptionalHeader'
    # ]

    # for attr in attributes:
    #     parts = attr.split('.')
    #     obj = sample
    #     for part in parts:
    #         if hasattr(obj, part):
    #             obj = getattr(obj, part)
    #         else:
    #             obj = None
    #             break
    #     if obj is not None:
    #         features_dict[attr] = obj
    #     else:
    #         features_dict[attr] = 0

    # features_dict['ImportsNbDLL'] = len(sample.DIRECTORY_ENTRY_IMPORT)
    # features_dict['ImportsNb'] = sum([x.imports for x in sample.DIRECTORY_ENTRY_IMPORT])
    # features_dict['ImportsNbOrdinal'] = sum([len(x.imports) for x in sample.DIRECTORY_ENTRY_IMPORT])
    # features_dict['ExportNb'] = len(sample.DIRECTORY_ENTRY_EXPORT.symbols)
    # features_dict['ResourcesNb'] = len(sample.DIRECTORY_ENTRY_RESOURCE.entries)
    # features_dict['ResourcesMeanEntropy'] = sample.RESOURCES_MEAN_ENTROPY
    # features_dict['ResourcesMinEntropy'] = sample.RESOURCES_MIN_ENTROPY
    # features_dict['ResourcesMaxEntropy'] = sample.RESOURCES_MAX_ENTROPY
    # features_dict['ResourcesMeanSize'] = sample.RESOURCES_MEAN_SIZE
    # features_dict['ResourcesMinSize'] = sample.RESOURCES_MIN_SIZE
    # features_dict['ResourcesMaxSize'] = sample.RESOURCES_MAX_SIZE
    # features_dict['LoadConfigurationSize'] = sample.LOAD_CONFIGURATION_SIZE
    # features_dict['VersionInformationSize'] = sample.VERSION_INFORMATION_SIZE
    features_dict['Family'] = path.split('\\')[-2]

    return features_dict